name: Win MSVC, Linux GCC, Linux Clang

on: [ push, pull_request, workflow_dispatch ]

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}

    strategy:
      # We want to see all failing combinations, not just the first one.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        build_type: [ Release, Debug ]
        bitness: [ 32, 64 ]
        compiler: [ native, clang ]
        exclude:
          # TODO: Add this in the future
          - os: windows-latest
            compiler: clang
        include:
          # Windows
          - os: windows-latest
            bitness: 32
            arch: -A Win32

          - os: windows-latest
            bitness: 64
            arch: -A x64

          ## MSVC
          - os: windows-latest
            compiler: native
            c_compiler: cl
            cpp_compiler: cl

          # Linux
          - os: ubuntu-latest
            bitness: 32
            arch: -DCMAKE_C_FLAGS="-m32" -DCMAKE_CXX_FLAGS="-m32"

          - os: ubuntu-latest
            bitness: 64
            arch: -DCMAKE_C_FLAGS="-m64" -DCMAKE_CXX_FLAGS="-m64"

          ## GCC
          - os: ubuntu-latest
            compiler: native
            c_compiler: gcc
            cpp_compiler: g++

          ## Clang
          - os: ubuntu-latest
            compiler: clang
            c_compiler: clang
            cpp_compiler: clang++

    env:
      BUILD_DIR: "${{ github.workspace }}/build"

    steps:
      - name: Install 32-bit compiler toolchain
        if: ${{ matrix.bitness == '32' && matrix.os == 'ubuntu-latest' }}
        run: sudo apt update && sudo apt install gcc-multilib

      - uses: actions/checkout@v5
        with:
          submodules: 'recursive'

      - name: Configure CMake for build
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ env.BUILD_DIR }}
          -S ${{ github.workspace }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          ${{ matrix.arch }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because
        # the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ env.BUILD_DIR }} --config ${{ matrix.build_type }}

      # TODO: Deduplicate this command
      - name: Configure CMake for test
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ env.BUILD_DIR }}
          -S ${{ github.workspace }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          ${{ matrix.arch }}
          -DPOLYHOOK_BUILD_DLL="OFF"

      - name: Build tests
        # Build your program with the given configuration. Note that --config is needed because
        # the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ env.BUILD_DIR }} --config ${{ matrix.build_type }} --target PolyHook_2

      - name: Run tests
        run: ${{ env.BUILD_DIR }}/PolyHook_2
